name: PR Checks
on:
  pull_request:
    branch: [ main ]
    paths:
      - 'pihole-sync-image/**'

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      working_dir: "pihole-sync-image"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Test  Build Container
        run: docker build .
        working-directory: ${{ env.working_dir }}

  python-pr:
    runs-on: ubuntu-latest
    env:
      working_dir: "pihole-sync-image"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ${{ env.working_dir }}

      - name: Install dev dependencies
        run: pip install -r dev_requirements.txt
        working-directory: ${{ env.working_dir }}

      - name: Check Black formatting has been applied
        run: black --check pihole_sync.py
        working-directory: ${{ env.working_dir }}

      - name: Check pylint passes
        run: pylint pihole_sync.py
        working-directory: ${{ env.working_dir }}

      - name: Get current version
        id: current-version
        run: echo "::set-output name=version::$(bump2version --list --dry-run --config-file .bump2version_pyhole_sync_image patch | grep current_version= | sed -r s,"^.*=",,)"

      - name: Checkout ${{ github.base_ref }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.base_ref }}

      - name: Get ${{ github.base_ref }} version
        id: old-version
        run: |
          echo "::set-output name=version::$(bump2version --dry-run --list --allow-dirty --config-file .bump2version_pyhole_sync_image patch | grep current_version= | sed -r s,"^.*=",,)"

      - name: Checkout current branch
        uses: actions/checkout@v2

      - name: Check version has been bumped
        run: "python .github/workflows/version_compare.py --current-branch ${{ steps.current-version.outputs.version }} --target-branch ${{ steps.old-version.outputs.version }}"

          
          
          
          